// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
DATABASE_URL="postgresql://postgres.aqxkuqvmxllkycqdkcdk:Belajarkungfu2@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true&schema=MiniProject"

*/

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events       Event[]       @relation("OrganizerEvents")
  transactions Transaction[]
  reviews      Review[]      // ðŸ”¥ Tambahkan ini (fix error relasi ke Review)
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  userId  String
  eventId String

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // ðŸ”¥ 1 user hanya bisa review 1x per event
}

model Event {
  id             String        @id @default(uuid())
  name           String
  description    String?
  location       String
  price          Int
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  availableSeats Int           @default(0)

  promotion      Promotion[]
  transactions   Transaction[]
  organizerId    String
  organizer      User          @relation("OrganizerEvents", fields: [organizerId], references: [id])

  reviews        Review[]      // ðŸ”¥ Wajib ada untuk relasi dua arah
}


model Promotion {
  id String @id @default(uuid())
  code String
  discount Int
  startDate DateTime
  endDate DateTime
  eventId String
  event Event @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, eventId])
}


model Transaction {
  id              String            @id @default(uuid())
  userId          String
  eventId         String
  quantity        Int
  totalPrice      Int
  status          TransactionStatus @default(waiting_payment)
  paymentProofUrl String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  expiresAt       DateTime

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}


enum Role {
  CUSTOMER
  ORGANIZER
  ADMIN
}

enum TransactionStatus {
  waiting_payment
  waiting_confirmation
  done
  rejected
  expired
  canceled
}
